# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:23:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class Aggregate(RootModel[int]):
    root: int = Field(..., description='The sum of results returned in this response.')


class Data(BaseModel):
    blocking: Optional[bool] = None


class Data1(BaseModel):
    bookmarked: Optional[bool] = None


class CashtagFields(BaseModel):
    tag: str = Field(..., examples=['TWTR'])


class Reason(Enum):
    official_client_forbidden = 'official-client-forbidden'
    client_not_enrolled = 'client-not-enrolled'


class ComplianceJobName(RootModel[constr(max_length=64)]):
    root: constr(max_length=64) = Field(
        ..., description='User-provided name for a compliance job.', examples=['my-job']
    )


class ComplianceJobStatus(Enum):
    created = 'created'
    in_progress = 'in_progress'
    failed = 'failed'
    complete = 'complete'
    expired = 'expired'


class ComplianceJobType(Enum):
    tweets = 'tweets'
    users = 'users'


class ConnectionIssue(Enum):
    TooManyConnections = 'TooManyConnections'
    ProvisioningSubscription = 'ProvisioningSubscription'
    RuleConfigurationIssue = 'RuleConfigurationIssue'
    RulesInvalidIssue = 'RulesInvalidIssue'


class ContextAnnotationDomainFields(BaseModel):
    description: Optional[str] = Field(
        None, description='Description of the context annotation domain.'
    )
    id: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ..., description='The unique id for a context annotation domain.'
    )
    name: Optional[str] = Field(
        None, description='Name of the context annotation domain.'
    )


class ContextAnnotationEntityFields(BaseModel):
    description: Optional[str] = Field(
        None, description='Description of the context annotation entity.'
    )
    id: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ..., description='The unique id for a context annotation entity.'
    )
    name: Optional[str] = Field(
        None, description='Name of the context annotation entity.'
    )


class CountryCode(RootModel[constr(pattern=r'^[A-Z]{2}$')]):
    root: constr(pattern=r'^[A-Z]{2}$') = Field(
        ...,
        description='A two-letter ISO 3166-1 alpha-2 country code.',
        examples=['US'],
    )


class Type(Enum):
    tweets = 'tweets'
    users = 'users'


class CreateComplianceJobRequest(BaseModel):
    name: Optional[ComplianceJobName] = None
    resumable: Optional[bool] = Field(
        None,
        description='If true, this endpoint will return a pre-signed URL with resumable uploads enabled.',
    )
    type: Type = Field(..., description='Type of compliance job to list.')


class ConversationType(Enum):
    Group = 'Group'


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='Creation time of the compliance job.',
        examples=['2021-01-06T18:40:40.000Z'],
    )


class ResourceType(Enum):
    user = 'user'
    tweet = 'tweet'
    media = 'media'
    list = 'list'
    space = 'space'


class Section(Enum):
    data = 'data'
    includes = 'includes'


class DmConversationId(
    RootModel[constr(pattern=r'^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$')]
):
    root: constr(pattern=r'^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$') = Field(
        ...,
        description="Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.",
        examples=['123123123-456456456'],
    )


class DmEventId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='Unique identifier of a DM Event.',
        examples=['1146654567674912769'],
    )


class DownloadExpiration(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='Expiration time of the download URL.',
        examples=['2021-01-06T18:40:40.000Z'],
    )


class DownloadUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description='URL from which the user will retrieve their compliance results.',
    )


class End(RootModel[datetime]):
    root: datetime = Field(..., description='The end time of the bucket.')


class EntityIndicesInclusiveExclusive(BaseModel):
    end: conint(ge=0) = Field(
        ...,
        description='Index (zero-based) at which position this entity ends.  The index is exclusive.',
        examples=[61],
    )
    start: conint(ge=0) = Field(
        ...,
        description='Index (zero-based) at which position this entity starts.  The index is inclusive.',
        examples=[50],
    )


class EntityIndicesInclusiveInclusive(BaseModel):
    end: conint(ge=0) = Field(
        ...,
        description='Index (zero-based) at which position this entity ends.  The index is inclusive.',
        examples=[61],
    )
    start: conint(ge=0) = Field(
        ...,
        description='Index (zero-based) at which position this entity starts.  The index is inclusive.',
        examples=[50],
    )


class Error(BaseModel):
    code: int
    message: str


class Annotation(EntityIndicesInclusiveInclusive):
    normalized_text: Optional[str] = Field(
        None,
        description='Text used to determine annotation.',
        examples=['Barack Obama'],
    )
    probability: Optional[confloat(ge=0.0, le=1.0)] = Field(
        None, description='Confidence factor for annotation type.'
    )
    type: Optional[str] = Field(
        None, description='Annotation type.', examples=['Person']
    )


class BboxItem(RootModel[confloat(ge=-180.0, le=180.0)]):
    root: confloat(ge=-180.0, le=180.0)


class Type1(Enum):
    Feature = 'Feature'


class HashtagFields(BaseModel):
    tag: str = Field(
        ..., description='The text of the Hashtag.', examples=['MondayMotivation']
    )


class HttpStatusCode(RootModel[conint(ge=100, le=599)]):
    root: conint(ge=100, le=599) = Field(..., description='HTTP Status Code.')


class Error1(BaseModel):
    message: Optional[str] = None
    parameters: Optional[Dict[str, List[str]]] = None


class JobId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ..., description='Compliance Job ID.', examples=['1372966999991541762']
    )


class ListCreateRequest(BaseModel):
    description: Optional[constr(min_length=0, max_length=100)] = None
    name: constr(min_length=1, max_length=25)
    private: Optional[bool] = False


class Data4(BaseModel):
    deleted: Optional[bool] = None


class Data5(BaseModel):
    following: Optional[bool] = None


class ListId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='The unique identifier of this List.',
        examples=['1146654567674912769'],
    )


class Data6(BaseModel):
    is_member: Optional[bool] = None


class ListPinnedRequest(BaseModel):
    list_id: ListId


class Data7(BaseModel):
    pinned: Optional[bool] = None


class ListUpdateRequest(BaseModel):
    description: Optional[constr(min_length=0, max_length=100)] = None
    name: Optional[constr(min_length=1, max_length=25)] = None
    private: Optional[bool] = None


class Data9(BaseModel):
    updated: Optional[bool] = None


class MediaHeight(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(..., description='The height of the media in pixels.')


class MediaId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='The unique identifier of this Media.',
        examples=['1146654567674912769'],
    )


class MediaKey(RootModel[constr(pattern=r'^([0-9]+)_([0-9]+)$')]):
    root: constr(pattern=r'^([0-9]+)_([0-9]+)$') = Field(
        ..., description='The Media Key identifier for this attachment.'
    )


class MediaWidth(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(..., description='The width of the media in pixels.')


class Data10(BaseModel):
    muting: Optional[bool] = None


class NewestId(RootModel[str]):
    root: str = Field(..., description='The newest id in this response.')


class NextToken(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(..., description='The next token.')


class OldestId(RootModel[str]):
    root: str = Field(..., description='The oldest id in this response.')


class DisconnectType(Enum):
    OperationalDisconnect = 'OperationalDisconnect'
    UpstreamOperationalDisconnect = 'UpstreamOperationalDisconnect'
    ForceDisconnect = 'ForceDisconnect'
    UpstreamUncleanDisconnect = 'UpstreamUncleanDisconnect'
    SlowReader = 'SlowReader'
    InternalError = 'InternalError'
    ClientApplicationStateDegraded = 'ClientApplicationStateDegraded'
    InvalidRules = 'InvalidRules'


class PaginationToken32(RootModel[constr(min_length=16)]):
    root: constr(min_length=16) = Field(..., description='A base32 pagination token.')


class PaginationToken36(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(..., description='A base36 pagination token.')


class PaginationTokenLong(RootModel[constr(min_length=1, max_length=19)]):
    root: constr(min_length=1, max_length=19) = Field(
        ..., description="A 'long' pagination token."
    )


class PlaceId(RootModel[str]):
    root: str = Field(
        ..., description='The identifier for this place.', examples=['f7eb2fa2fea288b1']
    )


class PlaceType(Enum):
    poi = 'poi'
    neighborhood = 'neighborhood'
    city = 'city'
    admin = 'admin'
    country = 'country'
    unknown = 'unknown'


class Type2(Enum):
    Point = 'Point'


class VotingStatus(Enum):
    open = 'open'
    closed = 'closed'


class PollId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='Unique identifier of this poll.',
        examples=['1365059861688410112'],
    )


class PollOptionLabel(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25) = Field(
        ..., description='The text of a poll choice.'
    )


class Position(RootModel[List[float]]):
    root: List[float] = Field(
        ...,
        description='A [GeoJson Position](https://tools.ietf.org/html/rfc7946#section-3.1.1) in the format `[longitude,latitude]`.',
        examples=[[-105.18816086351444, 40.247749999999996]],
        max_length=2,
        min_length=2,
    )


class PreviousToken(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(..., description='The previous token.')


class Problem(BaseModel):
    detail: Optional[str] = None
    status: Optional[int] = None
    title: str
    type: str


class ReplySettings(Enum):
    everyone = 'everyone'
    mentionedUsers = 'mentionedUsers'
    following = 'following'
    other = 'other'


class ResourceNotFoundProblem(Problem):
    parameter: constr(min_length=1)
    resource_id: str
    resource_type: ResourceType
    value: str = Field(..., description='Value will match the schema of the field.')


class ResourceUnauthorizedProblem(Problem):
    parameter: str
    resource_id: str
    resource_type: ResourceType
    section: Section
    value: str


class ResourceUnavailableProblem(Problem):
    parameter: constr(min_length=1)
    resource_id: str
    resource_type: ResourceType


class ResultCount(RootModel[int]):
    root: int = Field(
        ..., description='The number of results returned in this response.'
    )


class RuleId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='Unique identifier of this rule.',
        examples=['120897978112909812'],
    )


class RuleTag(RootModel[str]):
    root: str = Field(
        ...,
        description='A tag meant for the labeling of user provided rules.',
        examples=['Non-retweeted coffee Tweets'],
    )


class RuleValue(RootModel[str]):
    root: str = Field(
        ...,
        description='The filterlang value of the rule.',
        examples=['coffee -is:retweet'],
    )


RulesCapProblem = Problem


class RulesRequestSummary1(BaseModel):
    created: int = Field(
        ...,
        description='Number of user-specified stream filtering rules that were created.',
        examples=[1],
    )
    invalid: int = Field(
        ...,
        description='Number of invalid user-specified stream filtering rules.',
        examples=[1],
    )
    not_created: int = Field(
        ...,
        description='Number of user-specified stream filtering rules that were not created.',
        examples=[1],
    )
    valid: int = Field(
        ...,
        description='Number of valid user-specified stream filtering rules.',
        examples=[1],
    )


class RulesRequestSummary2(BaseModel):
    deleted: int = Field(
        ...,
        description='Number of user-specified stream filtering rules that were deleted.',
    )
    not_deleted: int = Field(
        ...,
        description='Number of user-specified stream filtering rules that were not deleted.',
    )


class RulesRequestSummary(RootModel[Union[RulesRequestSummary1, RulesRequestSummary2]]):
    root: Union[RulesRequestSummary1, RulesRequestSummary2]


class RulesResponseMetadata(BaseModel):
    next_token: Optional[NextToken] = None
    result_count: Optional[int] = Field(
        None, description='Number of Rules in result set.'
    )
    sent: str
    summary: Optional[RulesRequestSummary] = None


class State(Enum):
    live = 'live'
    scheduled = 'scheduled'
    ended = 'ended'


class Topic1(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the given topic.'
    )
    id: str = Field(..., description='An ID suitable for use in the REST API.')
    name: str = Field(..., description='The name of the given topic.')


class SpaceId(RootModel[constr(pattern=r'^[a-zA-Z0-9]{1,13}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9]{1,13}$') = Field(
        ...,
        description='The unique identifier of this Space.',
        examples=['1SLjjRYNejbKM'],
    )


class Start(RootModel[datetime]):
    root: datetime = Field(..., description='The start time of the bucket.')


class TopicId(RootModel[str]):
    root: str = Field(..., description='Unique identifier of this Topic.')


class Attachments1(BaseModel):
    media_keys: Optional[List[MediaKey]] = Field(
        None,
        description='A list of Media Keys for each one of the media attachments (if media are attached).',
        min_length=1,
    )
    poll_ids: Optional[List[PollId]] = Field(
        None, description='A list of poll IDs (if polls are attached).', min_length=1
    )


class EditControls(BaseModel):
    editable_until: datetime = Field(
        ...,
        description='Time when Tweet is no longer editable.',
        examples=['2021-01-06T18:40:40.000Z'],
    )
    edits_remaining: int = Field(
        ..., description='Number of times this Tweet can be edited.'
    )
    is_edit_eligible: bool = Field(
        ...,
        description='Indicates if this Tweet is eligible to be edited.',
        examples=[False],
    )


class NonPublicMetrics(BaseModel):
    impression_count: Optional[int] = Field(
        None, description='Number of times this Tweet has been viewed.'
    )


class OrganicMetrics(BaseModel):
    impression_count: int = Field(
        ..., description='Number of times this Tweet has been viewed.'
    )
    like_count: int = Field(
        ..., description='Number of times this Tweet has been liked.'
    )
    reply_count: int = Field(
        ..., description='Number of times this Tweet has been replied to.'
    )
    retweet_count: int = Field(
        ..., description='Number of times this Tweet has been Retweeted.'
    )


class PromotedMetrics(BaseModel):
    impression_count: Optional[int] = Field(
        None, description='Number of times this Tweet has been viewed.'
    )
    like_count: Optional[int] = Field(
        None, description='Number of times this Tweet has been liked.'
    )
    reply_count: Optional[int] = Field(
        None, description='Number of times this Tweet has been replied to.'
    )
    retweet_count: Optional[int] = Field(
        None, description='Number of times this Tweet has been Retweeted.'
    )


class PublicMetrics(BaseModel):
    impression_count: int = Field(
        ..., description='Number of times this Tweet has been viewed.'
    )
    like_count: int = Field(
        ..., description='Number of times this Tweet has been liked.'
    )
    quote_count: Optional[int] = Field(
        None, description='Number of times this Tweet has been quoted.'
    )
    reply_count: int = Field(
        ..., description='Number of times this Tweet has been replied to.'
    )
    retweet_count: int = Field(
        ..., description='Number of times this Tweet has been Retweeted.'
    )


class Type3(Enum):
    retweeted = 'retweeted'
    quoted = 'quoted'
    replied_to = 'replied_to'


class TweetComplianceStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class TweetCount(RootModel[int]):
    root: int = Field(..., description='The count for the bucket.')


class Geo2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    place_id: Optional[str] = None


class Option(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25) = Field(
        ..., description='The text of a poll choice.'
    )


class ReplySettings1(Enum):
    following = 'following'
    mentionedUsers = 'mentionedUsers'


class Poll1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    duration_minutes: conint(ge=5, le=10080) = Field(
        ..., description='Duration of the poll in minutes.'
    )
    options: List[Option] = Field(..., max_length=4, min_length=2)
    reply_settings: Optional[ReplySettings1] = Field(
        None, description='Settings to indicate who can reply to the Tweet.'
    )


class Data12(BaseModel):
    deleted: bool


class TweetDeleteResponse(BaseModel):
    data: Optional[Data12] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class TweetHideRequest(BaseModel):
    hidden: bool


class Data13(BaseModel):
    hidden: Optional[bool] = None


class TweetHideResponse(BaseModel):
    data: Optional[Data13] = None


class TweetId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.',
        examples=['1346889436626259968'],
    )


class TweetLabelStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class TweetText(RootModel[str]):
    root: str = Field(
        ...,
        description='The content of the Tweet.',
        examples=[
            'Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i'
        ],
    )


class Scope(Enum):
    tweet = 'tweet'
    user = 'user'


class TweetWithheld(BaseModel):
    copyright: bool = Field(
        ...,
        description='Indicates if the content is being withheld for on the basis of copyright infringement.',
    )
    country_codes: List[CountryCode] = Field(
        ...,
        description='Provides a list of countries where this content is not available.',
        min_length=1,
    )
    scope: Optional[Scope] = Field(
        None,
        description='Indicates whether the content being withheld is the `tweet` or a `user`.',
    )


UnsupportedAuthenticationProblem = Problem


class UploadExpiration(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='Expiration time of the upload URL.',
        examples=['2021-01-06T18:40:40.000Z'],
    )


class UploadUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ..., description='URL to which the user will upload their Tweet or user IDs.'
    )


class Url(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description='A validly formatted URL.',
        examples=['https://developer.twitter.com/en/docs/twitter-api'],
    )


class UrlImage(BaseModel):
    height: Optional[MediaHeight] = None
    url: Optional[Url] = None
    width: Optional[MediaWidth] = None


class Period(Enum):
    Daily = 'Daily'
    Monthly = 'Monthly'


class Scope1(Enum):
    Account = 'Account'
    Product = 'Product'


class UsageCapExceededProblem(Problem):
    period: Optional[Period] = None
    scope: Optional[Scope1] = None


class PublicMetrics1(BaseModel):
    followers_count: int = Field(
        ..., description='Number of Users who are following this User.'
    )
    following_count: int = Field(
        ..., description='Number of Users this User is following.'
    )
    listed_count: int = Field(
        ..., description='The number of lists that include this User.'
    )
    tweet_count: int = Field(
        ...,
        description='The number of Tweets (including Retweets) posted by this User.',
    )


class UserComplianceStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class UserId(RootModel[constr(pattern=r'^[0-9]{1,19}$')]):
    root: constr(pattern=r'^[0-9]{1,19}$') = Field(
        ...,
        description='Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.',
        examples=['2244994945'],
    )


class UserIdMatchesAuthenticatedUser(RootModel[str]):
    root: str = Field(
        ...,
        description='Unique identifier of this User. The value must be the same as the authenticated user.',
        examples=['2244994945'],
    )


class UserName(RootModel[constr(pattern=r'^[A-Za-z0-9_]{1,15}$')]):
    root: constr(pattern=r'^[A-Za-z0-9_]{1,15}$') = Field(
        ..., description='The Twitter handle (screen name) of this user.'
    )


class User2(BaseModel):
    id: UserId


class UserProfileModificationObjectSchema(BaseModel):
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    new_value: str
    profile_field: str
    user: User2


class UserScrubGeoObjectSchema(BaseModel):
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    up_to_tweet_id: TweetId
    user: User2


class UserScrubGeoSchema(BaseModel):
    scrub_geo: UserScrubGeoObjectSchema


class UserTakedownComplianceSchema(BaseModel):
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    user: User2
    withheld_in_countries: List[CountryCode] = Field(..., min_length=1)


class Scope2(Enum):
    user = 'user'


class UserWithheld(BaseModel):
    country_codes: List[CountryCode] = Field(
        ...,
        description='Provides a list of countries where this content is not available.',
        min_length=1,
    )
    scope: Optional[Scope2] = Field(
        None, description='Indicates that the content being withheld is a `user`.'
    )


class UserWithheldComplianceSchema(BaseModel):
    user_withheld: UserTakedownComplianceSchema


class UsersFollowingCreateRequest(BaseModel):
    target_user_id: UserId


class Data14(BaseModel):
    following: Optional[bool] = None
    pending_follow: Optional[bool] = None


class UsersFollowingCreateResponse(BaseModel):
    data: Optional[Data14] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Data15(BaseModel):
    following: Optional[bool] = None


class UsersFollowingDeleteResponse(BaseModel):
    data: Optional[Data15] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersLikesCreateRequest(BaseModel):
    tweet_id: TweetId


class Data16(BaseModel):
    liked: Optional[bool] = None


class UsersLikesCreateResponse(BaseModel):
    data: Optional[Data16] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersLikesDeleteResponse(BaseModel):
    data: Optional[Data16] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersRetweetsCreateRequest(BaseModel):
    tweet_id: TweetId


class Data18(BaseModel):
    retweeted: Optional[bool] = None


class UsersRetweetsCreateResponse(BaseModel):
    data: Optional[Data18] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersRetweetsDeleteResponse(BaseModel):
    data: Optional[Data18] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Variant(BaseModel):
    bit_rate: Optional[int] = Field(None, description='The bit rate of the media.')
    content_type: Optional[str] = Field(
        None, description='The content type of the media.'
    )
    url: Optional[AnyUrl] = Field(None, description='The url to the media.')


class Variants(RootModel[List[Variant]]):
    root: List[Variant] = Field(
        ..., description='An array of all available variants of the media.'
    )


class NonPublicMetrics1(BaseModel):
    playback_0_count: Optional[int] = Field(
        None, description='Number of users who made it through 0% of the video.'
    )
    playback_100_count: Optional[int] = Field(
        None, description='Number of users who made it through 100% of the video.'
    )
    playback_25_count: Optional[int] = Field(
        None, description='Number of users who made it through 25% of the video.'
    )
    playback_50_count: Optional[int] = Field(
        None, description='Number of users who made it through 50% of the video.'
    )
    playback_75_count: Optional[int] = Field(
        None, description='Number of users who made it through 75% of the video.'
    )


class OrganicMetrics1(BaseModel):
    playback_0_count: Optional[int] = Field(
        None, description='Number of users who made it through 0% of the video.'
    )
    playback_100_count: Optional[int] = Field(
        None, description='Number of users who made it through 100% of the video.'
    )
    playback_25_count: Optional[int] = Field(
        None, description='Number of users who made it through 25% of the video.'
    )
    playback_50_count: Optional[int] = Field(
        None, description='Number of users who made it through 50% of the video.'
    )
    playback_75_count: Optional[int] = Field(
        None, description='Number of users who made it through 75% of the video.'
    )
    view_count: Optional[int] = Field(
        None, description='Number of times this video has been viewed.'
    )


class PromotedMetrics1(BaseModel):
    playback_0_count: Optional[int] = Field(
        None, description='Number of users who made it through 0% of the video.'
    )
    playback_100_count: Optional[int] = Field(
        None, description='Number of users who made it through 100% of the video.'
    )
    playback_25_count: Optional[int] = Field(
        None, description='Number of users who made it through 25% of the video.'
    )
    playback_50_count: Optional[int] = Field(
        None, description='Number of users who made it through 50% of the video.'
    )
    playback_75_count: Optional[int] = Field(
        None, description='Number of users who made it through 75% of the video.'
    )
    view_count: Optional[int] = Field(
        None, description='Number of times this video has been viewed.'
    )


class PublicMetrics2(BaseModel):
    view_count: Optional[int] = Field(
        None, description='Number of times this video has been viewed.'
    )


class Type4(Enum):
    tweets = 'tweets'
    users = 'users'


class Status(Enum):
    created = 'created'
    in_progress = 'in_progress'
    failed = 'failed'
    complete = 'complete'


class ComplianceJobField(Enum):
    created_at = 'created_at'
    download_expires_at = 'download_expires_at'
    download_url = 'download_url'
    id = 'id'
    name = 'name'
    resumable = 'resumable'
    status = 'status'
    type = 'type'
    upload_expires_at = 'upload_expires_at'
    upload_url = 'upload_url'


class ComplianceJobFields(RootModel[List[ComplianceJobField]]):
    root: List[ComplianceJobField] = Field(
        ...,
        description='The fields available for a ComplianceJob object.',
        examples=[
            [
                'created_at',
                'download_expires_at',
                'download_url',
                'id',
                'name',
                'resumable',
                'status',
                'type',
                'upload_expires_at',
                'upload_url',
            ]
        ],
        min_length=1,
    )


class ComplianceJobFields1(RootModel[List[ComplianceJobField]]):
    root: List[ComplianceJobField] = Field(
        ...,
        description='The fields available for a ComplianceJob object.',
        examples=[
            [
                'created_at',
                'download_expires_at',
                'download_url',
                'id',
                'name',
                'resumable',
                'status',
                'type',
                'upload_expires_at',
                'upload_url',
            ]
        ],
        min_length=1,
    )


class EventType(Enum):
    MessageCreate = 'MessageCreate'
    ParticipantsJoin = 'ParticipantsJoin'
    ParticipantsLeave = 'ParticipantsLeave'


class DmEventField(Enum):
    attachments = 'attachments'
    created_at = 'created_at'
    dm_conversation_id = 'dm_conversation_id'
    event_type = 'event_type'
    id = 'id'
    participant_ids = 'participant_ids'
    referenced_tweets = 'referenced_tweets'
    sender_id = 'sender_id'
    text = 'text'


class Expansion(Enum):
    attachments_media_keys = 'attachments.media_keys'
    participant_ids = 'participant_ids'
    referenced_tweets_id = 'referenced_tweets.id'
    sender_id = 'sender_id'


class MediaField(Enum):
    alt_text = 'alt_text'
    duration_ms = 'duration_ms'
    height = 'height'
    media_key = 'media_key'
    non_public_metrics = 'non_public_metrics'
    organic_metrics = 'organic_metrics'
    preview_image_url = 'preview_image_url'
    promoted_metrics = 'promoted_metrics'
    public_metrics = 'public_metrics'
    type = 'type'
    url = 'url'
    variants = 'variants'
    width = 'width'


class UserField(Enum):
    created_at = 'created_at'
    description = 'description'
    entities = 'entities'
    id = 'id'
    location = 'location'
    name = 'name'
    pinned_tweet_id = 'pinned_tweet_id'
    profile_image_url = 'profile_image_url'
    protected = 'protected'
    public_metrics = 'public_metrics'
    url = 'url'
    username = 'username'
    verified = 'verified'
    verified_type = 'verified_type'
    withheld = 'withheld'


class TweetField(Enum):
    attachments = 'attachments'
    author_id = 'author_id'
    context_annotations = 'context_annotations'
    conversation_id = 'conversation_id'
    created_at = 'created_at'
    edit_controls = 'edit_controls'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities = 'entities'
    geo = 'geo'
    id = 'id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    lang = 'lang'
    non_public_metrics = 'non_public_metrics'
    organic_metrics = 'organic_metrics'
    possibly_sensitive = 'possibly_sensitive'
    promoted_metrics = 'promoted_metrics'
    public_metrics = 'public_metrics'
    referenced_tweets = 'referenced_tweets'
    reply_settings = 'reply_settings'
    source = 'source'
    text = 'text'
    withheld = 'withheld'


class EventTypes(RootModel[List[EventType]]):
    root: List[EventType] = Field(
        ..., examples=[['MessageCreate', 'ParticipantsLeave']], min_length=1
    )


class DmEventFields(RootModel[List[DmEventField]]):
    root: List[DmEventField] = Field(
        ...,
        description='The fields available for a DmEvent object.',
        examples=[
            [
                'attachments',
                'created_at',
                'dm_conversation_id',
                'event_type',
                'id',
                'participant_ids',
                'referenced_tweets',
                'sender_id',
                'text',
            ]
        ],
        min_length=1,
    )


class Expansions1(RootModel[List[Expansion]]):
    root: List[Expansion] = Field(
        ...,
        description='The list of fields you can expand for a [DmEvent](#DmEvent) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'participant_ids',
                'referenced_tweets.id',
                'sender_id',
            ]
        ],
        min_length=1,
    )


class MediaFields(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class UserFields(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TweetFields(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class EventTypes1(RootModel[List[EventType]]):
    root: List[EventType] = Field(
        ..., examples=[['MessageCreate', 'ParticipantsLeave']], min_length=1
    )


class DmEventFields1(RootModel[List[DmEventField]]):
    root: List[DmEventField] = Field(
        ...,
        description='The fields available for a DmEvent object.',
        examples=[
            [
                'attachments',
                'created_at',
                'dm_conversation_id',
                'event_type',
                'id',
                'participant_ids',
                'referenced_tweets',
                'sender_id',
                'text',
            ]
        ],
        min_length=1,
    )


class Expansions2(RootModel[List[Expansion]]):
    root: List[Expansion] = Field(
        ...,
        description='The list of fields you can expand for a [DmEvent](#DmEvent) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'participant_ids',
                'referenced_tweets.id',
                'sender_id',
            ]
        ],
        min_length=1,
    )


class MediaFields1(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class UserFields1(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TweetFields1(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class EventTypes2(RootModel[List[EventType]]):
    root: List[EventType] = Field(
        ..., examples=[['MessageCreate', 'ParticipantsLeave']], min_length=1
    )


class DmEventFields2(RootModel[List[DmEventField]]):
    root: List[DmEventField] = Field(
        ...,
        description='The fields available for a DmEvent object.',
        examples=[
            [
                'attachments',
                'created_at',
                'dm_conversation_id',
                'event_type',
                'id',
                'participant_ids',
                'referenced_tweets',
                'sender_id',
                'text',
            ]
        ],
        min_length=1,
    )


class Expansions3(RootModel[List[Expansion]]):
    root: List[Expansion] = Field(
        ...,
        description='The list of fields you can expand for a [DmEvent](#DmEvent) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'participant_ids',
                'referenced_tweets.id',
                'sender_id',
            ]
        ],
        min_length=1,
    )


class MediaFields2(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class UserFields2(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TweetFields2(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class ListField(Enum):
    created_at = 'created_at'
    description = 'description'
    follower_count = 'follower_count'
    id = 'id'
    member_count = 'member_count'
    name = 'name'
    owner_id = 'owner_id'
    private = 'private'


class Expansion6(Enum):
    owner_id = 'owner_id'


class ListFields(RootModel[List[ListField]]):
    root: List[ListField] = Field(
        ...,
        description='The fields available for a List object.',
        examples=[
            [
                'created_at',
                'description',
                'follower_count',
                'id',
                'member_count',
                'name',
                'owner_id',
                'private',
            ]
        ],
        min_length=1,
    )


class Expansions4(RootModel[List[Expansion6]]):
    root: List[Expansion6] = Field(
        ...,
        description='The list of fields you can expand for a [List](#List) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['owner_id']],
        min_length=1,
    )


class UserFields3(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion8(Enum):
    pinned_tweet_id = 'pinned_tweet_id'


class UserFields4(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions5(RootModel[List[Expansion8]]):
    root: List[Expansion8] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields3(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class UserFields5(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions6(RootModel[List[Expansion8]]):
    root: List[Expansion8] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields4(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion12(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class PollField(Enum):
    duration_minutes = 'duration_minutes'
    end_datetime = 'end_datetime'
    id = 'id'
    options = 'options'
    voting_status = 'voting_status'


class PlaceField(Enum):
    contained_within = 'contained_within'
    country = 'country'
    country_code = 'country_code'
    full_name = 'full_name'
    geo = 'geo'
    id = 'id'
    name = 'name'
    place_type = 'place_type'


class TweetFields5(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions7(RootModel[List[Expansion12]]):
    root: List[Expansion12] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields3(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields6(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Id(RootModel[constr(pattern=r'^[a-zA-Z0-9]{1,13}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9]{1,13}$') = Field(
        ...,
        description='The unique identifier of this Space.',
        examples=['1SLjjRYNejbKM'],
    )


class SpaceField(Enum):
    created_at = 'created_at'
    creator_id = 'creator_id'
    ended_at = 'ended_at'
    host_ids = 'host_ids'
    id = 'id'
    invited_user_ids = 'invited_user_ids'
    is_ticketed = 'is_ticketed'
    lang = 'lang'
    participant_count = 'participant_count'
    scheduled_start = 'scheduled_start'
    speaker_ids = 'speaker_ids'
    started_at = 'started_at'
    state = 'state'
    subscriber_count = 'subscriber_count'
    title = 'title'
    topic_ids = 'topic_ids'
    updated_at = 'updated_at'


class Expansion14(Enum):
    creator_id = 'creator_id'
    host_ids = 'host_ids'
    invited_user_ids = 'invited_user_ids'
    speaker_ids = 'speaker_ids'
    topic_ids = 'topic_ids'


class TopicField(Enum):
    description = 'description'
    id = 'id'
    name = 'name'


class Ids(RootModel[List[Id]]):
    root: List[Id] = Field(..., max_length=100, min_length=1)


class SpaceFields(RootModel[List[SpaceField]]):
    root: List[SpaceField] = Field(
        ...,
        description='The fields available for a Space object.',
        examples=[
            [
                'created_at',
                'creator_id',
                'ended_at',
                'host_ids',
                'id',
                'invited_user_ids',
                'is_ticketed',
                'lang',
                'participant_count',
                'scheduled_start',
                'speaker_ids',
                'started_at',
                'state',
                'subscriber_count',
                'title',
                'topic_ids',
                'updated_at',
            ]
        ],
        min_length=1,
    )


class Expansions8(RootModel[List[Expansion14]]):
    root: List[Expansion14] = Field(
        ...,
        description='The list of fields you can expand for a [Space](#Space) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            ['creator_id', 'host_ids', 'invited_user_ids', 'speaker_ids', 'topic_ids']
        ],
        min_length=1,
    )


class UserFields7(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TopicFields(RootModel[List[TopicField]]):
    root: List[TopicField] = Field(
        ...,
        description='The fields available for a Topic object.',
        examples=[['description', 'id', 'name']],
        min_length=1,
    )


class UserIds(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., max_length=100, min_length=1)


class SpaceFields1(RootModel[List[SpaceField]]):
    root: List[SpaceField] = Field(
        ...,
        description='The fields available for a Space object.',
        examples=[
            [
                'created_at',
                'creator_id',
                'ended_at',
                'host_ids',
                'id',
                'invited_user_ids',
                'is_ticketed',
                'lang',
                'participant_count',
                'scheduled_start',
                'speaker_ids',
                'started_at',
                'state',
                'subscriber_count',
                'title',
                'topic_ids',
                'updated_at',
            ]
        ],
        min_length=1,
    )


class Expansions9(RootModel[List[Expansion14]]):
    root: List[Expansion14] = Field(
        ...,
        description='The list of fields you can expand for a [Space](#Space) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            ['creator_id', 'host_ids', 'invited_user_ids', 'speaker_ids', 'topic_ids']
        ],
        min_length=1,
    )


class UserFields8(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TopicFields1(RootModel[List[TopicField]]):
    root: List[TopicField] = Field(
        ...,
        description='The fields available for a Topic object.',
        examples=[['description', 'id', 'name']],
        min_length=1,
    )


class State1(Enum):
    live = 'live'
    scheduled = 'scheduled'
    all = 'all'


class SpaceFields2(RootModel[List[SpaceField]]):
    root: List[SpaceField] = Field(
        ...,
        description='The fields available for a Space object.',
        examples=[
            [
                'created_at',
                'creator_id',
                'ended_at',
                'host_ids',
                'id',
                'invited_user_ids',
                'is_ticketed',
                'lang',
                'participant_count',
                'scheduled_start',
                'speaker_ids',
                'started_at',
                'state',
                'subscriber_count',
                'title',
                'topic_ids',
                'updated_at',
            ]
        ],
        min_length=1,
    )


class Expansions10(RootModel[List[Expansion14]]):
    root: List[Expansion14] = Field(
        ...,
        description='The list of fields you can expand for a [Space](#Space) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            ['creator_id', 'host_ids', 'invited_user_ids', 'speaker_ids', 'topic_ids']
        ],
        min_length=1,
    )


class UserFields9(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TopicFields2(RootModel[List[TopicField]]):
    root: List[TopicField] = Field(
        ...,
        description='The fields available for a Topic object.',
        examples=[['description', 'id', 'name']],
        min_length=1,
    )


class SpaceFields3(RootModel[List[SpaceField]]):
    root: List[SpaceField] = Field(
        ...,
        description='The fields available for a Space object.',
        examples=[
            [
                'created_at',
                'creator_id',
                'ended_at',
                'host_ids',
                'id',
                'invited_user_ids',
                'is_ticketed',
                'lang',
                'participant_count',
                'scheduled_start',
                'speaker_ids',
                'started_at',
                'state',
                'subscriber_count',
                'title',
                'topic_ids',
                'updated_at',
            ]
        ],
        min_length=1,
    )


class Expansions11(RootModel[List[Expansion14]]):
    root: List[Expansion14] = Field(
        ...,
        description='The list of fields you can expand for a [Space](#Space) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            ['creator_id', 'host_ids', 'invited_user_ids', 'speaker_ids', 'topic_ids']
        ],
        min_length=1,
    )


class UserFields10(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class TopicFields3(RootModel[List[TopicField]]):
    root: List[TopicField] = Field(
        ...,
        description='The fields available for a Topic object.',
        examples=[['description', 'id', 'name']],
        min_length=1,
    )


class Expansion22(Enum):
    pinned_tweet_id = 'pinned_tweet_id'


class UserFields11(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions12(RootModel[List[Expansion22]]):
    root: List[Expansion22] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields6(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion24(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class TweetFields7(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions13(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields4(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields1(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields12(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields1(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Ids1(RootModel[List[TweetId]]):
    root: List[TweetId] = Field(..., max_length=100, min_length=1)


class TweetFields8(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions14(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields5(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields2(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields13(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields2(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Granularity(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class SearchCountField(Enum):
    end = 'end'
    start = 'start'
    tweet_count = 'tweet_count'


class SearchCountFields(RootModel[List[SearchCountField]]):
    root: List[SearchCountField] = Field(
        ...,
        description='The fields available for a SearchCount object.',
        examples=[['end', 'start', 'tweet_count']],
        min_length=1,
    )


class SearchCountFields1(RootModel[List[SearchCountField]]):
    root: List[SearchCountField] = Field(
        ...,
        description='The fields available for a SearchCount object.',
        examples=[['end', 'start', 'tweet_count']],
        min_length=1,
    )


class TweetFields9(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions15(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields6(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields3(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields14(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields3(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class TweetFields10(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions16(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields7(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields4(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields15(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields4(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class TweetFields11(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions17(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields8(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields5(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields16(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields5(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class SortOrder(Enum):
    recency = 'recency'
    relevancy = 'relevancy'


class TweetFields12(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions18(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields9(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields6(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields17(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields6(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class TweetFields13(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions19(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields10(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields7(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields18(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields7(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class TweetFields14(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions20(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields11(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields8(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields19(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields8(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Ids2(RootModel[List[RuleId]]):
    root: List[RuleId]


class TweetFields15(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions21(RootModel[List[Expansion24]]):
    root: List[Expansion24] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields12(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields9(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields20(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields9(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Expansion42(Enum):
    pinned_tweet_id = 'pinned_tweet_id'


class UserFields21(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions22(RootModel[List[Expansion42]]):
    root: List[Expansion42] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields16(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class ExcludeEnum(Enum):
    replies = 'replies'
    retweets = 'retweets'


class Expansion44(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class Exclude(RootModel[List[ExcludeEnum]]):
    root: List[ExcludeEnum] = Field(
        ..., examples=[['replies', 'retweets']], min_length=1
    )


class TweetFields17(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions23(RootModel[List[Expansion44]]):
    root: List[Expansion44] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields13(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields10(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields22(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields10(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Expansion46(Enum):
    pinned_tweet_id = 'pinned_tweet_id'


class UserFields23(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions24(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields18(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Ids3(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., max_length=100, min_length=1)


class UserFields24(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions25(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields19(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Username(RootModel[constr(pattern=r'^[A-Za-z0-9_]{1,15}$')]):
    root: constr(pattern=r'^[A-Za-z0-9_]{1,15}$') = Field(
        ..., description='The Twitter handle (screen name) of this User.'
    )


class Usernames(RootModel[List[Username]]):
    root: List[Username] = Field(
        ..., examples=['TwitterDev,TwitterAPI'], max_length=100, min_length=1
    )


class UserFields25(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions26(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields20(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class UserFields26(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions27(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields21(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class UserFields27(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions28(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields22(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class UserFields28(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions29(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields23(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class UserFields29(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions30(RootModel[List[Expansion46]]):
    root: List[Expansion46] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields24(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion60(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class TweetFields25(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions31(RootModel[List[Expansion60]]):
    root: List[Expansion60] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields14(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields11(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields30(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields11(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Expansion62(Enum):
    owner_id = 'owner_id'


class ListFields1(RootModel[List[ListField]]):
    root: List[ListField] = Field(
        ...,
        description='The fields available for a List object.',
        examples=[
            [
                'created_at',
                'description',
                'follower_count',
                'id',
                'member_count',
                'name',
                'owner_id',
                'private',
            ]
        ],
        min_length=1,
    )


class Expansions32(RootModel[List[Expansion62]]):
    root: List[Expansion62] = Field(
        ...,
        description='The list of fields you can expand for a [List](#List) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['owner_id']],
        min_length=1,
    )


class UserFields31(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion64(Enum):
    pinned_tweet_id = 'pinned_tweet_id'


class UserFields32(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions33(RootModel[List[Expansion64]]):
    root: List[Expansion64] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields26(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class UserFields33(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions34(RootModel[List[Expansion64]]):
    root: List[Expansion64] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields27(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion68(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class TweetFields28(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions35(RootModel[List[Expansion68]]):
    root: List[Expansion68] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields15(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields12(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields34(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields12(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Expansion70(Enum):
    owner_id = 'owner_id'


class ListFields2(RootModel[List[ListField]]):
    root: List[ListField] = Field(
        ...,
        description='The fields available for a List object.',
        examples=[
            [
                'created_at',
                'description',
                'follower_count',
                'id',
                'member_count',
                'name',
                'owner_id',
                'private',
            ]
        ],
        min_length=1,
    )


class Expansions36(RootModel[List[Expansion70]]):
    root: List[Expansion70] = Field(
        ...,
        description='The list of fields you can expand for a [List](#List) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['owner_id']],
        min_length=1,
    )


class UserFields35(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion72(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class TweetFields29(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions37(RootModel[List[Expansion72]]):
    root: List[Expansion72] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields16(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields13(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields36(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields13(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Expansion74(Enum):
    pinned_tweet_id = 'pinned_tweet_id'


class UserFields37(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions38(RootModel[List[Expansion74]]):
    root: List[Expansion74] = Field(
        ...,
        description='The list of fields you can expand for a [User](#User) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['pinned_tweet_id']],
        min_length=1,
    )


class TweetFields30(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion76(Enum):
    owner_id = 'owner_id'


class ListFields3(RootModel[List[ListField]]):
    root: List[ListField] = Field(
        ...,
        description='The fields available for a List object.',
        examples=[
            [
                'created_at',
                'description',
                'follower_count',
                'id',
                'member_count',
                'name',
                'owner_id',
                'private',
            ]
        ],
        min_length=1,
    )


class Expansions39(RootModel[List[Expansion76]]):
    root: List[Expansion76] = Field(
        ...,
        description='The list of fields you can expand for a [List](#List) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['owner_id']],
        min_length=1,
    )


class UserFields38(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class ListFields4(RootModel[List[ListField]]):
    root: List[ListField] = Field(
        ...,
        description='The fields available for a List object.',
        examples=[
            [
                'created_at',
                'description',
                'follower_count',
                'id',
                'member_count',
                'name',
                'owner_id',
                'private',
            ]
        ],
        min_length=1,
    )


class Expansions40(RootModel[List[Expansion76]]):
    root: List[Expansion76] = Field(
        ...,
        description='The list of fields you can expand for a [List](#List) object. If the field has an ID, it can be expanded into a full object.',
        examples=[['owner_id']],
        min_length=1,
    )


class UserFields39(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansion80(Enum):
    attachments_media_keys = 'attachments.media_keys'
    attachments_poll_ids = 'attachments.poll_ids'
    author_id = 'author_id'
    edit_history_tweet_ids = 'edit_history_tweet_ids'
    entities_mentions_username = 'entities.mentions.username'
    geo_place_id = 'geo.place_id'
    in_reply_to_user_id = 'in_reply_to_user_id'
    referenced_tweets_id = 'referenced_tweets.id'
    referenced_tweets_id_author_id = 'referenced_tweets.id.author_id'


class Exclude1(RootModel[List[ExcludeEnum]]):
    root: List[ExcludeEnum] = Field(..., examples=[['replies', 'retweets']])


class TweetFields31(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions41(RootModel[List[Expansion80]]):
    root: List[Expansion80] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields17(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields14(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields40(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields14(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class Exclude2(RootModel[List[ExcludeEnum]]):
    root: List[ExcludeEnum] = Field(
        ..., examples=[['replies', 'retweets']], min_length=1
    )


class TweetFields32(RootModel[List[TweetField]]):
    root: List[TweetField] = Field(
        ...,
        description='The fields available for a Tweet object.',
        examples=[
            [
                'attachments',
                'author_id',
                'context_annotations',
                'conversation_id',
                'created_at',
                'edit_controls',
                'edit_history_tweet_ids',
                'entities',
                'geo',
                'id',
                'in_reply_to_user_id',
                'lang',
                'non_public_metrics',
                'organic_metrics',
                'possibly_sensitive',
                'promoted_metrics',
                'public_metrics',
                'referenced_tweets',
                'reply_settings',
                'source',
                'text',
                'withheld',
            ]
        ],
        min_length=1,
    )


class Expansions42(RootModel[List[Expansion80]]):
    root: List[Expansion80] = Field(
        ...,
        description='The list of fields you can expand for a [Tweet](#Tweet) object. If the field has an ID, it can be expanded into a full object.',
        examples=[
            [
                'attachments.media_keys',
                'attachments.poll_ids',
                'author_id',
                'edit_history_tweet_ids',
                'entities.mentions.username',
                'geo.place_id',
                'in_reply_to_user_id',
                'referenced_tweets.id',
                'referenced_tweets.id.author_id',
            ]
        ],
        min_length=1,
    )


class MediaFields18(RootModel[List[MediaField]]):
    root: List[MediaField] = Field(
        ...,
        description='The fields available for a Media object.',
        examples=[
            [
                'alt_text',
                'duration_ms',
                'height',
                'media_key',
                'non_public_metrics',
                'organic_metrics',
                'preview_image_url',
                'promoted_metrics',
                'public_metrics',
                'type',
                'url',
                'variants',
                'width',
            ]
        ],
        min_length=1,
    )


class PollFields15(RootModel[List[PollField]]):
    root: List[PollField] = Field(
        ...,
        description='The fields available for a Poll object.',
        examples=[
            ['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']
        ],
        min_length=1,
    )


class UserFields41(RootModel[List[UserField]]):
    root: List[UserField] = Field(
        ...,
        description='The fields available for a User object.',
        examples=[
            [
                'created_at',
                'description',
                'entities',
                'id',
                'location',
                'name',
                'pinned_tweet_id',
                'profile_image_url',
                'protected',
                'public_metrics',
                'url',
                'username',
                'verified',
                'verified_type',
                'withheld',
            ]
        ],
        min_length=1,
    )


class PlaceFields15(RootModel[List[PlaceField]]):
    root: List[PlaceField] = Field(
        ...,
        description='The fields available for a Place object.',
        examples=[
            [
                'contained_within',
                'country',
                'country_code',
                'full_name',
                'geo',
                'id',
                'name',
                'place_type',
            ]
        ],
        min_length=1,
    )


class BlockUserMutationResponse(BaseModel):
    data: Optional[Data] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class BlockUserRequest(BaseModel):
    target_user_id: UserId


class BookmarkAddRequest(BaseModel):
    tweet_id: TweetId


class BookmarkMutationResponse(BaseModel):
    data: Optional[Data1] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class CashtagEntity(EntityIndicesInclusiveExclusive, CashtagFields):
    pass


ClientDisconnectedProblem = Problem


class ClientForbiddenProblem(Problem):
    reason: Optional[Reason] = None
    registration_url: Optional[AnyUrl] = None


class ComplianceJob(BaseModel):
    created_at: CreatedAt
    download_expires_at: DownloadExpiration
    download_url: DownloadUrl
    id: JobId
    name: Optional[ComplianceJobName] = None
    status: ComplianceJobStatus
    type: ComplianceJobType
    upload_expires_at: UploadExpiration
    upload_url: UploadUrl


ConflictProblem = Problem


class ConnectionExceptionProblem(Problem):
    connection_issue: Optional[ConnectionIssue] = None


class ContextAnnotation(BaseModel):
    domain: ContextAnnotationDomainFields
    entity: ContextAnnotationEntityFields


class CreateComplianceJobResponse(BaseModel):
    data: Optional[ComplianceJob] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Data2(BaseModel):
    dm_conversation_id: DmConversationId
    dm_event_id: DmEventId


class CreateDmEventResponse(BaseModel):
    data: Optional[Data2] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Delete(BaseModel):
    ids: Optional[List[RuleId]] = Field(
        None, description='IDs of all deleted user-specified stream filtering rules.'
    )
    values: Optional[List[RuleValue]] = Field(
        None, description='Values of all deleted user-specified stream filtering rules.'
    )


class DeleteRulesRequest(BaseModel):
    delete: Delete = Field(
        ...,
        description='IDs and values of all deleted user-specified stream filtering rules.',
    )


class DisallowedResourceProblem(Problem):
    resource_id: str
    resource_type: ResourceType
    section: Section


class Attachments(BaseModel):
    card_ids: Optional[List[str]] = Field(
        None, description='A list of card IDs (if cards are attached).', min_length=1
    )
    media_keys: Optional[List[MediaKey]] = Field(
        None,
        description='A list of Media Keys for each one of the media attachments (if media are attached).',
        min_length=1,
    )


class ReferencedTweet(BaseModel):
    id: TweetId


class DmEvent(BaseModel):
    attachments: Optional[Attachments] = Field(
        None,
        description='Specifies the type of attachments (if any) present in this DM.',
    )
    created_at: Optional[datetime] = None
    dm_conversation_id: Optional[DmConversationId] = None
    event_type: str = Field(..., examples=['MessageCreate'])
    id: DmEventId
    participant_ids: Optional[List[UserId]] = Field(
        None,
        description='A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.',
        min_length=1,
    )
    referenced_tweets: Optional[List[ReferencedTweet]] = Field(
        None, description='A list of Tweets this DM refers to.', min_length=1
    )
    sender_id: Optional[UserId] = None
    text: Optional[str] = None


class DmMediaAttachment(BaseModel):
    media_id: MediaId


class DmParticipants(RootModel[List[UserId]]):
    root: List[UserId] = Field(
        ...,
        description='Participants for the DM Conversation.',
        max_length=49,
        min_length=2,
    )


class DuplicateRuleProblem(Problem):
    id: Optional[str] = None
    value: Optional[str] = None


class FieldUnauthorizedProblem(Problem):
    field: str
    resource_type: ResourceType
    section: Section


class MatchingRule(BaseModel):
    id: RuleId
    tag: Optional[RuleTag] = None


GenericProblem = Problem


class Get2ComplianceJobsIdResponse(BaseModel):
    data: Optional[ComplianceJob] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Meta(BaseModel):
    result_count: Optional[ResultCount] = None


class Get2ComplianceJobsResponse(BaseModel):
    data: Optional[List[ComplianceJob]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta] = None


class Meta1(BaseModel):
    next_token: Optional[NextToken] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta7(BaseModel):
    result_count: Optional[ResultCount] = None


class Meta8(BaseModel):
    next_token: Optional[NextToken] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta10(BaseModel):
    result_count: Optional[ResultCount] = None


class Meta11(BaseModel):
    newest_id: Optional[NewestId] = None
    next_token: Optional[NextToken] = None
    oldest_id: Optional[OldestId] = None
    total_tweet_count: Optional[Aggregate] = None


class Meta13(BaseModel):
    next_token: Optional[NextToken] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta14(BaseModel):
    next_token: Optional[NextToken] = None
    result_count: Optional[ResultCount] = None


class Meta15(BaseModel):
    next_token: Optional[NextToken] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta16(BaseModel):
    newest_id: Optional[NewestId] = None
    next_token: Optional[NextToken] = None
    oldest_id: Optional[OldestId] = None
    result_count: Optional[ResultCount] = None


class Meta18(BaseModel):
    next_token: Optional[NextToken] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta25(BaseModel):
    newest_id: Optional[NewestId] = None
    next_token: Optional[NextToken] = None
    oldest_id: Optional[OldestId] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta26(BaseModel):
    next_token: Optional[NextToken] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class Meta28(BaseModel):
    result_count: Optional[ResultCount] = None


class Meta29(BaseModel):
    newest_id: Optional[NewestId] = None
    next_token: Optional[NextToken] = None
    oldest_id: Optional[OldestId] = None
    previous_token: Optional[PreviousToken] = None
    result_count: Optional[ResultCount] = None


class HashtagEntity(EntityIndicesInclusiveExclusive, HashtagFields):
    pass


class InvalidRequestProblem(Problem):
    errors: Optional[List[Error1]] = Field(None, min_length=1)


InvalidRuleProblem = Problem


class ListModel(BaseModel):
    created_at: Optional[datetime] = None
    description: Optional[str] = None
    follower_count: Optional[int] = None
    id: ListId
    member_count: Optional[int] = None
    name: str = Field(..., description='The name of this List.')
    owner_id: Optional[UserId] = None
    private: Optional[bool] = None


class ListAddUserRequest(BaseModel):
    user_id: UserId


class Data3(BaseModel):
    id: ListId
    name: str = Field(..., description='The name of this List.')


class ListCreateResponse(BaseModel):
    data: Optional[Data3] = Field(
        None, description='A Twitter List is a curated group of accounts.'
    )
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListDeleteResponse(BaseModel):
    data: Optional[Data4] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListFollowedRequest(BaseModel):
    list_id: ListId


class ListFollowedResponse(BaseModel):
    data: Optional[Data5] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListMutateResponse(BaseModel):
    data: Optional[Data6] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListPinnedResponse(BaseModel):
    data: Optional[Data7] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListUnpinResponse(BaseModel):
    data: Optional[Data7] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListUpdateResponse(BaseModel):
    data: Optional[Data9] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Media(BaseModel):
    height: Optional[MediaHeight] = None
    media_key: Optional[MediaKey] = None
    type: str
    width: Optional[MediaWidth] = None


class MentionFields(BaseModel):
    id: Optional[UserId] = None
    username: UserName


class MuteUserMutationResponse(BaseModel):
    data: Optional[Data10] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class MuteUserRequest(BaseModel):
    target_user_id: UserId


NonCompliantRulesProblem = Problem


Oauth1PermissionsProblem = Problem


class OperationalDisconnectProblem(Problem):
    disconnect_type: Optional[DisconnectType] = None


class Photo(Media):
    alt_text: Optional[str] = None
    url: Optional[AnyUrl] = None


class Point(BaseModel):
    coordinates: Position
    type: Type2 = Field(..., examples=['Point'])


class PollOption(BaseModel):
    label: PollOptionLabel
    position: int = Field(..., description='Position of this choice in the poll.')
    votes: int = Field(..., description='Number of users who voted for this choice.')


class Rule(BaseModel):
    id: Optional[RuleId] = None
    tag: Optional[RuleTag] = None
    value: RuleValue


class RuleNoId(BaseModel):
    tag: Optional[RuleTag] = None
    value: RuleValue


class RulesLookupResponse(BaseModel):
    data: Optional[List[Rule]] = None
    meta: RulesResponseMetadata


class SearchCount(BaseModel):
    end: End
    start: Start
    tweet_count: TweetCount


class Space(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Creation time of the Space.',
        examples=['2021-07-06T18:40:40.000Z'],
    )
    creator_id: Optional[UserId] = None
    ended_at: Optional[datetime] = Field(
        None,
        description='End time of the Space.',
        examples=['2021-07-06T18:40:40.000Z'],
    )
    host_ids: Optional[List[UserId]] = Field(
        None, description='The user ids for the hosts of the Space.'
    )
    id: SpaceId
    invited_user_ids: Optional[List[UserId]] = Field(
        None, description='An array of user ids for people who were invited to a Space.'
    )
    is_ticketed: Optional[bool] = Field(
        None,
        description='Denotes if the Space is a ticketed Space.',
        examples=['false'],
    )
    lang: Optional[str] = Field(
        None, description='The language of the Space.', examples=['en']
    )
    participant_count: Optional[int] = Field(
        None, description='The number of participants in a Space.', examples=[10]
    )
    scheduled_start: Optional[datetime] = Field(
        None,
        description='A date time stamp for when a Space is scheduled to begin.',
        examples=['2021-07-06T18:40:40.000Z'],
    )
    speaker_ids: Optional[List[UserId]] = Field(
        None,
        description='An array of user ids for people who were speakers in a Space.',
    )
    started_at: Optional[datetime] = Field(
        None,
        description='When the Space was started as a date string.',
        examples=['2021-7-14T04:35:55Z'],
    )
    state: State = Field(
        ..., description='The current state of the Space.', examples=['live']
    )
    subscriber_count: Optional[int] = Field(
        None,
        description='The number of people who have either purchased a ticket or set a reminder for this Space.',
        examples=[10],
    )
    title: Optional[str] = Field(
        None, description='The title of the Space.', examples=['Spaces are Awesome']
    )
    topics: Optional[List[Topic1]] = Field(
        None, description='The topics of a Space, as selected by its creator.'
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='When the Space was last updated.',
        examples=['2021-7-14T04:35:55Z'],
    )


class Topic(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The description of the given topic.',
        examples=['All about technology'],
    )
    id: TopicId
    name: str = Field(
        ..., description='The name of the given topic.', examples=['Technology']
    )


class Geo1(BaseModel):
    coordinates: Optional[Point] = None
    place_id: Optional[PlaceId] = None


class ReferencedTweet1(BaseModel):
    id: TweetId
    type: Type3


class Tweet1(BaseModel):
    author_id: UserId
    id: TweetId


class TweetComplianceSchema(BaseModel):
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    quote_tweet_id: Optional[TweetId] = None
    tweet: Tweet1


class Media1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    media_ids: List[MediaId] = Field(
        ...,
        description='A list of Media Ids to be attached to a created Tweet.',
        max_length=4,
        min_length=1,
    )
    tagged_user_ids: Optional[List[UserId]] = Field(
        None,
        description='A list of User Ids to be tagged in the media for created Tweet.',
        max_length=10,
        min_length=0,
    )


class Reply(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclude_reply_user_ids: Optional[List[UserId]] = Field(
        None, description='A list of User Ids to be excluded from the reply Tweet.'
    )
    in_reply_to_tweet_id: TweetId


class TweetCreateRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    card_uri: Optional[str] = Field(
        None,
        description='Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.',
    )
    direct_message_deep_link: Optional[str] = Field(
        None,
        description='Link to take the conversation from the public timeline to a private Direct Message.',
    )
    for_super_followers_only: Optional[bool] = Field(
        False, description='Exclusive Tweet for super followers.'
    )
    geo: Optional[Geo2] = Field(
        None, description='Place ID being attached to the Tweet for geo location.'
    )
    media: Optional[Media1] = Field(
        None,
        description='Media information being attached to created Tweet. This is mutually exclusive from Quote Tweet Id, Poll, and Card URI.',
    )
    nullcast: Optional[bool] = Field(
        False,
        description='Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.',
    )
    poll: Optional[Poll1] = Field(
        None,
        description='Poll options for a Tweet with a poll. This is mutually exclusive from Media, Quote Tweet Id, and Card URI.',
    )
    quote_tweet_id: Optional[TweetId] = None
    reply: Optional[Reply] = Field(
        None, description='Tweet information of the Tweet being replied to.'
    )
    reply_settings: Optional[ReplySettings1] = Field(
        None, description='Settings to indicate who can reply to the Tweet.'
    )
    text: Optional[TweetText] = None


class Data11(BaseModel):
    id: TweetId
    text: TweetText


class TweetCreateResponse(BaseModel):
    data: Optional[Data11] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class TweetDeleteComplianceSchema(BaseModel):
    delete: TweetComplianceSchema


class TweetDropComplianceSchema(BaseModel):
    drop: TweetComplianceSchema


class Tweet2(BaseModel):
    id: TweetId


class TweetEditComplianceObjectSchema(BaseModel):
    edit_tweet_ids: List[TweetId] = Field(..., min_length=1)
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    initial_tweet_id: TweetId
    tweet: Tweet2


class TweetEditComplianceSchema(BaseModel):
    tweet_edit: TweetEditComplianceObjectSchema


class Tweet3(BaseModel):
    author_id: UserId
    id: TweetId


class TweetNotice(BaseModel):
    application: str = Field(
        ...,
        description='If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.',
        examples=['apply'],
    )
    details: Optional[str] = Field(
        None, description='Information shown on the Tweet label'
    )
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    event_type: str = Field(
        ..., description='The type of label on the Tweet', examples=['misleading']
    )
    extended_details_url: Optional[str] = Field(
        None, description='Link to more information about this kind of label'
    )
    label_title: Optional[str] = Field(
        None, description='Title/header of the Tweet label'
    )
    tweet: Tweet3


class TweetNoticeSchema(BaseModel):
    public_tweet_notice: TweetNotice


class TweetTakedownComplianceSchema(BaseModel):
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    quote_tweet_id: Optional[TweetId] = None
    tweet: Tweet3
    withheld_in_countries: List[CountryCode] = Field(..., min_length=1)


class TweetUndropComplianceSchema(BaseModel):
    undrop: TweetComplianceSchema


class TweetUnviewable(BaseModel):
    application: str = Field(
        ...,
        description='If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.',
        examples=['apply'],
    )
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    tweet: Tweet3


class TweetUnviewableSchema(BaseModel):
    public_tweet_unviewable: TweetUnviewable


class TweetWithheldComplianceSchema(BaseModel):
    withheld: TweetTakedownComplianceSchema


class UrlFields(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Description of the URL landing page.',
        examples=['This is a description of the website.'],
    )
    display_url: Optional[str] = Field(
        None,
        description='The URL as displayed in the Twitter client.',
        examples=['twittercommunity.com/t/introducing-…'],
    )
    expanded_url: Optional[Url] = None
    images: Optional[List[UrlImage]] = Field(None, min_length=1)
    media_key: Optional[MediaKey] = None
    status: Optional[HttpStatusCode] = None
    title: Optional[str] = Field(
        None,
        description='Title of the page the URL points to.',
        examples=['Introducing the v2 follow lookup endpoints'],
    )
    unwound_url: Optional[AnyUrl] = Field(
        None,
        description='Fully resolved url.',
        examples=[
            'https://twittercommunity.com/t/introducing-the-v2-follow-lookup-endpoints/147118'
        ],
    )
    url: Url


class UserComplianceSchema(BaseModel):
    event_at: datetime = Field(
        ..., description='Event time.', examples=['2021-07-06T18:40:40.000Z']
    )
    user: User2


class UserDeleteComplianceSchema(BaseModel):
    user_delete: UserComplianceSchema


class UserProfileModificationComplianceSchema(BaseModel):
    user_profile_modification: UserProfileModificationObjectSchema


class UserProtectComplianceSchema(BaseModel):
    user_protect: UserComplianceSchema


class UserSuspendComplianceSchema(BaseModel):
    user_suspend: UserComplianceSchema


class UserUndeleteComplianceSchema(BaseModel):
    user_undelete: UserComplianceSchema


class UserUnprotectComplianceSchema(BaseModel):
    user_unprotect: UserComplianceSchema


class UserUnsuspendComplianceSchema(BaseModel):
    user_unsuspend: UserComplianceSchema


class Video(Media):
    duration_ms: Optional[int] = None
    non_public_metrics: Optional[NonPublicMetrics1] = Field(
        None,
        description='Nonpublic engagement metrics for the Media at the time of the request.',
    )
    organic_metrics: Optional[OrganicMetrics1] = Field(
        None,
        description='Organic nonpublic engagement metrics for the Media at the time of the request.',
    )
    preview_image_url: Optional[AnyUrl] = None
    promoted_metrics: Optional[PromotedMetrics1] = Field(
        None,
        description='Promoted nonpublic engagement metrics for the Media at the time of the request.',
    )
    public_metrics: Optional[PublicMetrics2] = Field(
        None, description='Engagement metrics for the Media at the time of the request.'
    )
    variants: Optional[Variants] = None


class AddOrDeleteRulesResponse(BaseModel):
    data: Optional[List[Rule]] = Field(
        None, description='All user-specified stream filtering rules that were created.'
    )
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: RulesResponseMetadata


class AddRulesRequest(BaseModel):
    add: List[RuleNoId]


class AnimatedGif(Media):
    preview_image_url: Optional[AnyUrl] = None
    variants: Optional[Variants] = None


class DmAttachments(RootModel[List[DmMediaAttachment]]):
    root: List[DmMediaAttachment] = Field(..., description='Attachments to a DM Event.')


class Geo(BaseModel):
    bbox: List[BboxItem] = Field(
        ...,
        examples=[[-105.193475, 39.60973, -105.053164, 39.761974]],
        max_length=4,
        min_length=4,
    )
    geometry: Optional[Point] = None
    properties: Dict[str, Any]
    type: Type1


class Get2TweetsCountsAllResponse(BaseModel):
    data: Optional[List[SearchCount]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta11] = None


class Get2TweetsCountsRecentResponse(BaseModel):
    data: Optional[List[SearchCount]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta11] = None


class MentionEntity(EntityIndicesInclusiveExclusive, MentionFields):
    pass


class Place(BaseModel):
    contained_within: Optional[List[PlaceId]] = Field(None, min_length=1)
    country: Optional[str] = Field(
        None,
        description='The full name of the county in which this place exists.',
        examples=['United States'],
    )
    country_code: Optional[CountryCode] = None
    full_name: str = Field(
        ..., description='The full name of this place.', examples=['Lakewood, CO']
    )
    geo: Optional[Geo] = None
    id: PlaceId
    name: Optional[str] = Field(
        None,
        description='The human readable name of this place.',
        examples=['Lakewood'],
    )
    place_type: Optional[PlaceType] = None


class Poll(BaseModel):
    duration_minutes: Optional[conint(ge=5, le=10080)] = None
    end_datetime: Optional[datetime] = None
    id: PollId
    options: List[PollOption] = Field(..., max_length=4, min_length=2)
    voting_status: Optional[VotingStatus] = None


class TweetComplianceData(
    RootModel[
        Union[
            TweetDeleteComplianceSchema,
            TweetWithheldComplianceSchema,
            TweetDropComplianceSchema,
            TweetUndropComplianceSchema,
            TweetEditComplianceSchema,
        ]
    ]
):
    root: Union[
        TweetDeleteComplianceSchema,
        TweetWithheldComplianceSchema,
        TweetDropComplianceSchema,
        TweetUndropComplianceSchema,
        TweetEditComplianceSchema,
    ] = Field(..., description='Tweet compliance data.')


class TweetComplianceStreamResponse1(BaseModel):
    data: TweetComplianceData


class TweetComplianceStreamResponse(
    RootModel[Union[TweetComplianceStreamResponse1, TweetComplianceStreamResponse2]]
):
    root: Union[TweetComplianceStreamResponse1, TweetComplianceStreamResponse2] = Field(
        ..., description='Tweet compliance stream events.'
    )


class TweetLabelData(RootModel[Union[TweetNoticeSchema, TweetUnviewableSchema]]):
    root: Union[TweetNoticeSchema, TweetUnviewableSchema] = Field(
        ..., description='Tweet label data.'
    )


class TweetLabelStreamResponse1(BaseModel):
    data: TweetLabelData


class TweetLabelStreamResponse(
    RootModel[Union[TweetLabelStreamResponse1, TweetLabelStreamResponse2]]
):
    root: Union[TweetLabelStreamResponse1, TweetLabelStreamResponse2] = Field(
        ..., description='Tweet label stream events.'
    )


class UrlEntity(EntityIndicesInclusiveExclusive, UrlFields):
    pass


class Url1(BaseModel):
    urls: Optional[List[UrlEntity]] = Field(None, min_length=1)


class UserComplianceData(
    RootModel[
        Union[
            UserProtectComplianceSchema,
            UserUnprotectComplianceSchema,
            UserDeleteComplianceSchema,
            UserUndeleteComplianceSchema,
            UserSuspendComplianceSchema,
            UserUnsuspendComplianceSchema,
            UserWithheldComplianceSchema,
            UserScrubGeoSchema,
            UserProfileModificationComplianceSchema,
        ]
    ]
):
    root: Union[
        UserProtectComplianceSchema,
        UserUnprotectComplianceSchema,
        UserDeleteComplianceSchema,
        UserUndeleteComplianceSchema,
        UserSuspendComplianceSchema,
        UserUnsuspendComplianceSchema,
        UserWithheldComplianceSchema,
        UserScrubGeoSchema,
        UserProfileModificationComplianceSchema,
    ] = Field(..., description='User compliance data.')


class UserComplianceStreamResponse1(BaseModel):
    data: UserComplianceData


class UserComplianceStreamResponse(
    RootModel[Union[UserComplianceStreamResponse1, UserComplianceStreamResponse2]]
):
    root: Union[UserComplianceStreamResponse1, UserComplianceStreamResponse2] = Field(
        ..., description='User compliance stream events.'
    )


class AddOrDeleteRulesRequest(RootModel[Union[AddRulesRequest, DeleteRulesRequest]]):
    root: Union[AddRulesRequest, DeleteRulesRequest]


class CreateAttachmentsMessageRequest(BaseModel):
    attachments: DmAttachments
    text: Optional[constr(min_length=1)] = Field(
        None, description='Text of the message.'
    )


class CreateTextMessageRequest(BaseModel):
    attachments: Optional[DmAttachments] = None
    text: constr(min_length=1) = Field(..., description='Text of the message.')


class FullTextEntities(BaseModel):
    annotations: Optional[List[Annotation]] = Field(None, min_length=1)
    cashtags: Optional[List[CashtagEntity]] = Field(None, min_length=1)
    hashtags: Optional[List[HashtagEntity]] = Field(None, min_length=1)
    mentions: Optional[List[MentionEntity]] = Field(None, min_length=1)
    urls: Optional[List[UrlEntity]] = Field(None, min_length=1)


class Tweet(BaseModel):
    attachments: Optional[Attachments1] = Field(
        None,
        description='Specifies the type of attachments (if any) present in this Tweet.',
    )
    author_id: Optional[UserId] = None
    context_annotations: Optional[List[ContextAnnotation]] = Field(None, min_length=1)
    conversation_id: Optional[TweetId] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Creation time of the Tweet.',
        examples=['2021-01-06T18:40:40.000Z'],
    )
    edit_controls: Optional[EditControls] = None
    edit_history_tweet_ids: List[TweetId] = Field(
        ..., description='A list of Tweet Ids in this Tweet chain.', min_length=1
    )
    entities: Optional[FullTextEntities] = None
    geo: Optional[Geo1] = Field(
        None, description='The location tagged on the Tweet, if the user provided one.'
    )
    id: TweetId
    in_reply_to_user_id: Optional[UserId] = None
    lang: Optional[str] = Field(
        None,
        description='Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.',
        examples=['en'],
    )
    non_public_metrics: Optional[NonPublicMetrics] = Field(
        None,
        description='Nonpublic engagement metrics for the Tweet at the time of the request.',
    )
    organic_metrics: Optional[OrganicMetrics] = Field(
        None,
        description='Organic nonpublic engagement metrics for the Tweet at the time of the request.',
    )
    possibly_sensitive: Optional[bool] = Field(
        None,
        description='Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.',
        examples=[False],
    )
    promoted_metrics: Optional[PromotedMetrics] = Field(
        None,
        description='Promoted nonpublic engagement metrics for the Tweet at the time of the request.',
    )
    public_metrics: Optional[PublicMetrics] = Field(
        None, description='Engagement metrics for the Tweet at the time of the request.'
    )
    referenced_tweets: Optional[List[ReferencedTweet1]] = Field(
        None,
        description='A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.',
        min_length=1,
    )
    reply_settings: Optional[ReplySettings] = None
    source: Optional[str] = Field(None, description='This is deprecated.')
    text: TweetText
    withheld: Optional[TweetWithheld] = None


class Entities(BaseModel):
    description: Optional[FullTextEntities] = None
    url: Optional[Url1] = Field(
        None,
        description="Expanded details for the URL specified in the User's profile, with start and end indices.",
    )


class User(BaseModel):
    created_at: Optional[datetime] = Field(
        None, description='Creation time of this User.'
    )
    description: Optional[str] = Field(
        None,
        description="The text of this User's profile description (also known as bio), if the User provided one.",
    )
    entities: Optional[Entities] = Field(
        None, description="A list of metadata found in the User's profile description."
    )
    id: UserId
    location: Optional[str] = Field(
        None,
        description="The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.",
    )
    name: str = Field(
        ..., description='The friendly name of this User, as shown on their profile.'
    )
    pinned_tweet_id: Optional[TweetId] = None
    profile_image_url: Optional[AnyUrl] = Field(
        None, description='The URL to the profile image for this User.'
    )
    protected: Optional[bool] = Field(
        None,
        description="Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).",
    )
    public_metrics: Optional[PublicMetrics1] = Field(
        None, description='A list of metrics for this User.'
    )
    url: Optional[str] = Field(
        None, description="The URL specified in the User's profile."
    )
    username: UserName
    verified: Optional[bool] = Field(
        None, description='Indicate if this User is a verified Twitter User.'
    )
    verified_type: Optional[str] = Field(
        None,
        description='The Twitter Blue verified type of the user, eg: blue, government, business or none.',
    )
    withheld: Optional[UserWithheld] = None


class CreateMessageRequest(
    RootModel[Union[CreateTextMessageRequest, CreateAttachmentsMessageRequest]]
):
    root: Union[CreateTextMessageRequest, CreateAttachmentsMessageRequest]


class Expansions(BaseModel):
    media: Optional[List[Media]] = Field(None, min_length=1)
    places: Optional[List[Place]] = Field(None, min_length=1)
    polls: Optional[List[Poll]] = Field(None, min_length=1)
    topics: Optional[List[Topic]] = Field(None, min_length=1)
    tweets: Optional[List[Tweet]] = Field(None, min_length=1)
    users: Optional[List[User]] = Field(None, min_length=1)


class FilteredStreamingTweetResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    matching_rules: Optional[List[MatchingRule]] = Field(
        None, description='The list of rules which matched the Tweet'
    )


class Get2DmConversationsIdDmEventsResponse(BaseModel):
    data: Optional[List[DmEvent]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta1] = None


class Get2DmConversationsWithParticipantIdDmEventsResponse(BaseModel):
    data: Optional[List[DmEvent]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta1] = None


class Get2DmEventsResponse(BaseModel):
    data: Optional[List[DmEvent]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta1] = None


class Get2ListsIdFollowersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta1] = None


class Get2ListsIdMembersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta1] = None


class Get2ListsIdResponse(BaseModel):
    data: Optional[ListModel] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2ListsIdTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta1] = None


class Get2SpacesByCreatorIdsResponse(BaseModel):
    data: Optional[List[Space]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta7] = None


class Get2SpacesIdBuyersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta8] = None


class Get2SpacesIdResponse(BaseModel):
    data: Optional[Space] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2SpacesIdTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta8] = None


class Get2SpacesResponse(BaseModel):
    data: Optional[List[Space]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2SpacesSearchResponse(BaseModel):
    data: Optional[List[Space]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta10] = None


class Get2TweetsFirehoseStreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsIdLikingUsersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta13] = None


class Get2TweetsIdQuoteTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta14] = None


class Get2TweetsIdResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsIdRetweetedByResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta15] = None


class Get2TweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsSample10StreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsSampleStreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsSearchAllResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta16] = None


class Get2TweetsSearchRecentResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta16] = None


class Get2TweetsSearchStreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersByResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersByUsernameUsernameResponse(BaseModel):
    data: Optional[User] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersIdBlockingResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdBookmarksResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdFollowedListsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdFollowersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdFollowingResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdLikedTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdListMembershipsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2UsersIdMentionsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta25] = None


class Get2UsersIdMutingResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta26] = None


class Get2UsersIdOwnedListsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta26] = None


class Get2UsersIdPinnedListsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta28] = None


class Get2UsersIdResponse(BaseModel):
    data: Optional[User] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersIdTimelinesReverseChronologicalResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta29] = None


class Get2UsersIdTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta29] = None


class Get2UsersMeResponse(BaseModel):
    data: Optional[User] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class StreamingTweetResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class CreateDmConversationRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conversation_type: ConversationType = Field(
        ..., description='The conversation type that is being created.'
    )
    message: CreateMessageRequest
    participant_ids: DmParticipants
